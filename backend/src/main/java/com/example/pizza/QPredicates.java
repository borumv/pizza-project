package com.example.pizza;

import com.querydsl.core.types.ExpressionUtils;
import com.querydsl.core.types.Predicate;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;

/**
 * A builder class to construct a composite {@link Predicate} using the 'allOf' method from {@link ExpressionUtils}.
 * The builder allows adding multiple predicates based on specific conditions and combining them into a single predicate
 * using the 'allOf' method.
 */
public class QPredicates {
    List<Predicate> predicates = new ArrayList<>();

    /**
     * Creates a new instance of the QPredicates builder.
     *
     * @return A new instance of the QPredicates builder.
     */
    public QPredicates builder() {
        return new QPredicates();
    }

    /**
     * Adds a predicate to the builder based on a given condition.
     * If the provided object is not null, the predicate generated by the predicateFunction will be added to the list
     * of predicates.
     *
     * @param obj               The object that determines whether to add the predicate.
     * @param predicateFunction The function that generates the predicate based on the provided object.
     * @param <T>               The type of the object.
     * @return The QPredicates builder with the predicate added if the object is not null; otherwise, it returns the
     * same QPredicates builder instance.
     */
    public <T> QPredicates add(T obj, Function<T, Predicate> predicateFunction) {
        if (obj != null) {
            predicates.add(predicateFunction.apply(obj));
        }
        return this;
    }

    /**
     * Builds the composite predicate by combining all the predicates added to the builder using the 'allOf' method
     * from {@link ExpressionUtils}.
     *
     * @return The composite predicate formed by combining all the predicates added to the builder using the 'allOf'
     * method.
     */
    public Predicate build() {
        return ExpressionUtils.allOf(predicates);
    }
}
